###############################################################################
Maybe useful next/previous iterator classes. Replaced by more general PeekIterator.
###############################################################################
class NextIterator:
    """Iterator wrapper with next_val and at_end attributes."""
    def __init__(self, it):
        self.it = it
        try:
            self.next_val = self.it.__next__()
        except StopIteration:
            self.at_end = True
        else:
            self.at_end = False

    def __iter__(self):
        return self

    def __next__(self):
        if self.at_end:
            raise StopIteration
        try:
            self.next_val = self.it.__next__()
        except StopIteration:
            self.at_end = True
            del self.next_val

class PrevIterator:
    """Iterator wrapper with prev_val and at_start attributes."""
    def __init__(self, it):
        self.it = it
        self.at_start = True

    def __iter__(self):
        return self

    def __next__(self):
        self.prev_val = self.it.__next__()
        self.at_start = False
        return prev_val


class PrevNextIterator(NextIterator):
    """Iterator wrapper with prev_val, next_val, at_start, and at_end attributes."""
    def __init__(self, it):
        super().__init__(PrevIterator(it))

    @property
    def prev_val(self):
        return self.it.prev_val

    @property
    def at_start(self):
        return self.it.at_start
###############################################################################
sqlite query listing user accounts
###############################################################################
WITH RECURSIVE
    r(guid, name) AS (
        SELECT guid, name
            FROM accounts
            WHERE name = 'Root Account'
        UNION ALL
        SELECT accounts.guid, r.name || ' > ' || accounts.name
            FROM r
            JOIN accounts ON (accounts.parent_guid = r.guid)
    )
SELECT accounts.guid, r.name, accounts.account_type
    FROM r
    JOIN accounts USING (guid)
    ORDER BY r.name;
###############################################################################
sqlite query listing all accounts including weird parent chain with no names
###############################################################################
WITH RECURSIVE
    fmt_name(guid, name_str) AS (
        SELECT guid, CASE WHEN name <> '' THEN name ELSE substr(guid, 0, 8) END FROM accounts
    ),
    r(guid, name, next_parent) AS (
        SELECT guid, name_str, parent_guid FROM accounts JOIN fmt_name USING(guid)
        UNION ALL SELECT r.guid, name_str || ' > ' || r.name, accounts.parent_guid
                  FROM r
                  JOIN accounts ON accounts.guid = r.next_parent
                  JOIN fmt_name ON (fmt_name.guid = accounts.guid)
    )
SELECT accounts.guid, accounts.account_type, r.name FROM r JOIN accounts USING (guid) WHERE r.next_parent is NULL ORDER BY r.name;
