diff --git a/tools/pdf2txt.py b/tools/pdf2txt.py
index 5eb24bf..0d2d815 100755
--- a/tools/pdf2txt.py
+++ b/tools/pdf2txt.py
@@ -1,14 +1,63 @@
 #!/usr/bin/env python
+import os
 import sys
+import json
+import math
+
 from pdfminer.pdfdocument import PDFDocument
 from pdfminer.pdfparser import PDFParser
 from pdfminer.pdfinterp import PDFResourceManager, PDFPageInterpreter
-from pdfminer.pdfdevice import PDFDevice, TagExtractor
+from pdfminer.pdfdevice import PDFDevice, PDFTextDevice, TagExtractor
 from pdfminer.pdfpage import PDFPage
 from pdfminer.converter import XMLConverter, HTMLConverter, TextConverter
 from pdfminer.cmapdb import CMapDB
 from pdfminer.layout import LAParams
 from pdfminer.image import ImageWriter
+from pdfminer.utils import apply_matrix_pt, decode_text
+from pdfminer.pdffont import PDFUnicodeNotDefined
+
+def dec2int(x):
+    x10 = x * 10
+    y = int(math.floor(x10))
+    if math.fabs(x10 - y) < .000001:
+      return y
+    else:
+      return x10
+
+class ChaseDevice(PDFTextDevice):
+    def __init__(self, rsrcmgr, outfp):
+        self.chase_outfp = outfp
+        self.chase_out = []
+        PDFTextDevice.__init__(self, rsrcmgr)
+
+    def begin_page(self, page, ctm):
+        self.chase_page += 1
+        self.chase_ord = 0
+        return PDFTextDevice.begin_page(self, page, ctm)
+
+    def render_string_horizontal(self, seq, matrix, pos, font, *args):
+        self.chase_ord += 1
+        assert len(seq) == 1
+        text = []
+        for cid in font.decode(seq[0]):
+            try:
+                text.append(font.to_unichr(cid))
+            except PDFUnicodeNotDefined:
+                assert cid in (10, 173)
+                text.append(chr(cid).decode("cp1252"))
+            assert isinstance(text[-1], unicode), text
+        text = u"".join(text)
+        x, y = apply_matrix_pt(matrix, pos)
+        x = dec2int(x)
+        y = dec2int(y)
+        self.chase_out.append((
+            self.chase_page, -y, x, self.chase_ord, text
+        ))
+        return PDFTextDevice.render_string_horizontal(self, seq, matrix, pos, font, *args)
+
+    def close(self):
+        self.chase_out.sort()
+        json.dump(self.chase_out, self.chase_outfp, indent=4, separators=(',', ': '))
 
 # main
 def main(argv):
@@ -85,7 +134,9 @@ def main(argv):
         outfp = file(outfile, 'w')
     else:
         outfp = sys.stdout
-    if outtype == 'text':
+    if True:
+        device = ChaseDevice(rsrcmgr, outfp)
+    elif outtype == 'text':
         device = TextConverter(rsrcmgr, outfp, codec=codec, laparams=laparams,
                                imagewriter=imagewriter)
     elif outtype == 'xml':
@@ -103,6 +154,8 @@ def main(argv):
     for fname in args:
         fp = file(fname, 'rb')
         interpreter = PDFPageInterpreter(rsrcmgr, device)
+        device.chase_filename = fname
+        device.chase_page = 0
         for page in PDFPage.get_pages(fp, pagenos,
                                       maxpages=maxpages, password=password,
                                       caching=caching, check_extractable=True):
